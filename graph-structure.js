const nodes = [
  { id: 1, label: 'graph-structure.js', type: 'file', format: 'js' },
  { id: 2, label: 'nodes', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 3, label: 'edges', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 4, label: 'descriptions', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 5, label: 'node', type: 'array items', data: 'object', multiple: true },
  { id: 6, label: 'edge', type: 'array items', data: 'object', multiple: true },
  { id: 7, label: 'description', type: 'array items', data: 'object', multiple: true },
  { id: 15, label: 'project-graph', type: 'folder' },
  { id: 17, label: 'index.html', type: 'file', format: 'html' },
  { id: 19, label: 'reverseDict', type: 'js entity', entityType: 'constant', data: 'object' },
  { id: 21, label: 'nodeList', type: 'js entity', entityType: 'constant', data: 'ul element' },
  { id: 22, label: 'nodeNameText', type: 'js entity', entityType: 'constant', data: 'b element' },
  { id: 23, label: 'script.js', type: 'file', format: 'js' },
  { id: 24, label: 'nodeTemplate', type: 'js entity', entityType: 'constant', data: 'template element' },
  { id: 25, label: 'nodeTypeBtn', type: 'js entity', entityType: 'constant', data: 'button element' },
  { id: 26, label: 'nodeDescriptionParagraph', type: 'js entity', entityType: 'constant', data: 'p element' },
  { id: 27, label: 'handleHashChange', type: 'function', purpose: 'event handler' },
  { id: 29, label: 'presentNode', type: 'function', purpose: 'ui modification' },
  { id: 30, label: 'getNodeInfo', type: 'function', purpose: 'data aggregation' },
  { id: 31, label: 'getConnectedNodesInfo', type: 'function', purpose: 'data aggregation' },
  { id: 32, label: 'useNodeTemplate', type: 'function', purpose: 'factory' },
  { id: 34, label: 'startNodeId', type: 'js entity', entityType: 'constant', data: 'number' },
  { id: 35, label: 'nodeHeading', type: 'js entity', entityType: 'constant', data: 'h2 element' },
  { id: 50, label: 'nodeId', type: 'constant', data: 'number' },
  { id: 53, label: 'nodeId', type: 'parameter', data: 'number' },
  { id: 55, label: 'nodeDescriptor', type: 'constant', data: 'object' },
  { id: 56, label: 'nodeDescriptors', type: 'constant', data: 'array' },
  { id: 57, label: 'nodeItems', type: 'constant', data: 'array' },
  { id: 58, label: 'descriptor', type: 'constant', data: 'object' },
  { id: 59, label: 'li', type: 'constant', data: 'li element' },
  { id: 60, label: 'span', type: 'constant', data: 'span element' },
  { id: 61, label: 'a', type: 'constant', data: 'a element' },
  { id: 62, label: 'button', type: 'constant', data: 'button element' },
]

const edges = [
  // graph-structure.js contains nodes, edges, descriptions and reverseDict
  { id: 8, source: 1, target: 2, relation: 'declares' },
  { id: 9, source: 1, target: 3, relation: 'declares' },
  { id: 10, source: 1, target: 4, relation: 'declares' },
  { id: 20, source: 1, target: 19, relation: 'declares' },
  // nodes contains node
  { id: 12, source: 2, target: 5, relation: 'contains' },
  // edges contains edge
  { id: 13, source: 3, target: 6, relation: 'contains' },
  // descriptions contains description
  { id: 14, source: 4, target: 7, relation: 'contains' },
  // project-graph contains index.html, graph-structure.js and script.js
  { id: 16, source: 15, target: 1, relation: 'contains' },
  { id: 19, source: 15, target: 17, relation: 'contains' },
  { id: 36, source: 15, target: 23, relation: 'contains' },
  // index.html loads graph-structure.js, script.js
  { id: 18, source: 17, target: 1, relation: 'loads' },
  { id: 37, source: 17, target: 23, relation: 'loads' },
  // script.js contains nodeList, nodeNameText, nodeTypeBtn, nodeDescriptionParagraph, handleHashChange, presentNode, getNodeInfo, getConnectedNodesInfo, useNodeTemplate
  { id: 38, source: 23, target: 21, relation: 'declares' },
  { id: 39, source: 23, target: 22, relation: 'declares' },
  { id: 40, source: 23, target: 25, relation: 'declares' },
  { id: 41, source: 23, target: 26, relation: 'declares' },
  { id: 42, source: 23, target: 27, relation: 'declares' },
  { id: 43, source: 23, target: 29, relation: 'declares' },
  { id: 44, source: 23, target: 30, relation: 'declares' },
  { id: 45, source: 23, target: 31, relation: 'declares' },
  { id: 46, source: 23, target: 32, relation: 'declares' },
  { id: 48, source: 23, target: 34, relation: 'declares' },
  { id: 49, source: 23, target: 35, relation: 'declares' },
  // handleHashChange declares nodeId and runs presentNode, passing nodeId
  { id: 51, source: 27, target: 50, relation: 'declares' },
  { id: 47, source: 27, target: 29, relation: 'calls' },
  { id: 52, source: 29, target: 50, relation: 'takes' },
  // presentNode accepts nodeId, declares nodeDescriptor, nodeDescriptors, nodeItems, descriptor, li, span, a, button, runs getNodeInfo, getConnectedNodesInfo and useNodeTemplate, passing nodeId
  { id: 54, source: 53, target: 29, relation: 'parametrizes' },
  { id: 63, source: 29, target: 55, relation: 'declares' },
  { id: 64, source: 29, target: 56, relation: 'declares' },
  { id: 65, source: 29, target: 57, relation: 'declares' },
  { id: 66, source: 29, target: 58, relation: 'declares' },
  { id: 67, source: 29, target: 59, relation: 'declares' },
  { id: 68, source: 29, target: 60, relation: 'declares' },
  { id: 69, source: 29, target: 61, relation: 'declares' },
  { id: 70, source: 29, target: 62, relation: 'declares' },
  { id: 71, source: 29, target: 30, relation: 'calls' },
  { id: 72, source: 29, target: 31, relation: 'calls' },
  { id: 73, source: 29, target: 32, relation: 'calls' },
  { id: 74, source: 30, target: 53, relation: 'takes' },
  { id: 75, source: 31, target: 53, relation: 'takes' },
]

const descriptions = [
  { nodeId: 1, text: 'This file contains the graph structure of the project.' },
  { nodeId: 2, text: 'The constant is the array that contains all the nodes of the graph.' },
  { nodeId: 3, text: 'The constant is the array that contains all the edges of the graph.' },
  { nodeId: 4, text: 'The constant is an array that contains all the descriptions of the graph.' },
  { nodeId: 5, text: 'Multiple node objects contain the node id, label, type and other data about each node.' },
  { nodeId: 6, text: 'Multiple edge objects contain the source node id, target node id, label and other data about each edge.' },
  { nodeId: 7, text: 'Multiple description objects contain the node id and text of each node or edge description.' },
  { nodeId: 15, text: 'The root directory of the project, it contains all the files of the project.' },
  { nodeId: 17, text: 'The default web page that gives a user access to the graph.' },
  { nodeId: 19, text: 'The constant is an object that contains the reverse of each possible edge relation.' },
  { nodeId: 21, text: 'The constant is a ul DOM element that contains the list of related nodes.' },
  { nodeId: 22, text: 'The constant is a b DOM element that contains the name of the current node.' },
  { nodeId: 23, text: 'The file is the script that gives the web page its functionality.' },
  { nodeId: 24, text: 'The constant is a template element that contains the template for a related node rendering.' },
  { nodeId: 25, text: 'The constant is a button DOM element shown in the heading, it shows the type of the current node.' },
  { nodeId: 26, text: 'The constant is a p DOM element that contains the description of the current node.' },
  { nodeId: 27, text: 'The function is an event handler that runs when the location hash changes, which normally occurs when user clicked on one of related nodes in the list.' },
  { nodeId: 29, text: 'The function that modifies the UI to present the current node and its relations. It gets li template clones, fills them and replaces with them previous content of nodeList.' },
  { nodeId: 30, text: 'The function aggregates the data of the current node from the graph arrays.' },
  { nodeId: 31, text: 'The function aggregates the data of all the nodes related to node found by the id parameter.' },
  { nodeId: 32, text: 'The function is a factory that creates a cloned list item from the template to show a related node with it.' },
  { nodeId: 33, text: 'The function is an event handler that runs when the location hash changes.' },
  { nodeId: 34, text: 'The constant is the id number of a node to present when the page loads. It is often defined by the hash at the end of the address.' },
  { nodeId: 35, text: 'The constant is the heading of the current node.' },
  { nodeId: 50, text: 'The constant is the id number of a node to present when location hash has been changed.' },
  { nodeId: 53, text: 'The parameter is the id number of a node to present when presentNode is called.' },
  { nodeId: 55, text: 'The constant is an object that contains the data of the current node.' },
  { nodeId: 56, text: 'The constant is an array that contains the data of all the nodes related to the current node.' },
  { nodeId: 57, text: 'The constant is an array that contains the li DOM elements of all the related nodes.' },
  { nodeId: 58, text: 'The constant is an object that contains the data of a related node.' },
  { nodeId: 59, text: 'The constant is a li DOM element that contains a related node information.' },
  { nodeId: 60, text: 'The constant is a span DOM element that contains the relation of a related node to the current node.' },
  { nodeId: 61, text: 'The constant is an anchor DOM element that contains the link to a related node.' },
  { nodeId: 62, text: 'The constant is a button DOM element that contains the type of a related node.' },
]

const reverseDict = {
  'contains': 'contained by',
  'loads': 'loaded by',
  'declares': 'declared inside',
  'calls': 'called from',
  'takes': 'passed into',
  'parametrizes': 'parameterized by',
}
