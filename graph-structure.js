const nodes = [
  { id: 1, label: 'graph-structure.js', type: 'file', format: 'js' },
  { id: 2, label: 'nodes', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 3, label: 'edges', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 4, label: 'descriptions', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 5, label: 'node', type: 'array items', data: 'object', multiple: true },
  { id: 6, label: 'edge', type: 'array items', data: 'object', multiple: true },
  { id: 7, label: 'description', type: 'array items', data: 'object', multiple: true },
  { id: 15, label: 'project-graph', type: 'folder' },
  { id: 17, label: 'index.html', type: 'file', format: 'html' },
  { id: 19, label: 'reverseDict', type: 'js entity', entityType: 'constant', data: 'object' },
  { id: 21, label: 'nodeList', type: 'js entity', entityType: 'constant', data: 'ul element' },
  { id: 22, label: 'nodeNameBold', type: 'js entity', entityType: 'constant', data: 'b element' },
  { id: 23, label: 'script.js', type: 'file', format: 'js' },
  { id: 24, label: 'nodeTemplate', type: 'js entity', entityType: 'constant', data: 'template element' },
  { id: 25, label: 'nodeTypeBtn', type: 'js entity', entityType: 'constant', data: 'button element' },
  { id: 26, label: 'nodeDescriptionParagraph', type: 'js entity', entityType: 'constant', data: 'p element' },
  { id: 27, label: 'handleHashChange', type: 'function', purpose: 'event handler' },
  { id: 29, label: 'presentNode', type: 'function', functionType: 'classic', purpose: 'ui modification' },
  { id: 30, label: 'getNodeInfo', type: 'function', functionType: 'classic', purpose: 'data aggregation' },
  { id: 31, label: 'getConnectedNodesInfo', type: 'function', functionType: 'classic', purpose: 'data aggregation' },
  { id: 32, label: 'useNodeTemplate', type: 'function', functionType: 'classic', purpose: 'factory' },
  { id: 34, label: 'startNodeId', type: 'js entity', entityType: 'constant', data: 'number' },
  { id: 35, label: 'nodeHeading', type: 'js entity', entityType: 'constant', data: 'h2 element' },
  { id: 50, label: 'nodeId', type: 'js entity', entityType: 'constant', data: 'number' },
  { id: 53, label: 'nodeId', type: 'js entity', entityType: 'parameter', data: 'number' }, // presentNode(nodeId)
  { id: 55, label: 'nodeDescriptor', type: 'js entity', entityType: 'constant', data: 'object' },
  { id: 56, label: 'nodeDescriptors', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 57, label: 'nodeItems', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 58, label: 'descriptor', type: 'js entity', entityType: 'constant', data: 'object' },
  { id: 59, label: 'li', type: 'js entity', entityType: 'constant', data: 'li element' },
  { id: 60, label: 'span', type: 'js entity', entityType: 'constant', data: 'span element' },
  { id: 61, label: 'a', type: 'js entity', entityType: 'constant', data: 'a element' },
  { id: 62, label: 'button', type: 'js entity', entityType: 'constant', data: 'button element' },
  { id: 78, label: 'node', type: 'js entity', entityType: 'constant', data: 'object' }, // getNodeInfo(nodeId)
  { id: 79, label: 'nodeId', type: 'js entity', entityType: 'parameter', data: 'number' }, // getNodeInfo(nodeId)
  { id: 80, label: 'description', type: 'js entity', entityType: 'constant', data: 'object' },
  { id: 81, label: 'nodeInfo', type: 'improvised structure', data: 'object' },
  { id: 87, label: 'nodeId', type: 'js entity', entityType: 'parameter', data: 'number' }, // getConnectedNodesInfo(nodeId)
  { id: 88, label: 'targetEdges', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 89, label: 'sourceEdges', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 90, label: 'targetNodes', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 91, label: 'sourceNodes', type: 'js entity', entityType: 'constant', data: 'array' },
  { id: 92, label: 'connectedNodesInfo', type: 'improvised structure', data: 'array' },
  { id: 100, label: 'li', type: 'js entity', entityType: 'constant', data: 'li element' }, // useNodeTemplate()
  { id: 101, label: 'span', type: 'js entity', entityType: 'constant', data: 'span element' }, // useNodeTemplate()
  { id: 102, label: 'a', type: 'js entity', entityType: 'constant', data: 'a element' }, // useNodeTemplate()
  { id: 103, label: 'button', type: 'js entity', entityType: 'constant', data: 'button element' }, // useNodeTemplate()
  { id: 104, label: 'templateElementsDict', type: 'improvised structure', data: 'object' },
  { id: 110, label: 'doesNodeIdMatch', type: 'function', functionType: 'arrow', anonymous: true, purpose: 'iterating callback' },
  { id: 111, label: 'doesDescriptionNodeIdMatch', type: 'function', functionType: 'arrow', anonymous: true, purpose: 'iterating callback' },
  { id: 112, label: 'doesEdgeSourceMatch', type: 'function', functionType: 'arrow', anonymous: true, purpose: 'iterating callback' },
  { id: 113, label: 'doesEdgeTargetMatch', type: 'function', functionType: 'arrow', anonymous: true, purpose: 'iterating callback' },
  { id: 114, label: 'buildTargetNodeDescriptor', type: 'function', functionType: 'arrow', anonymous: true, purpose: 'iterating callback' },
  { id: 115, label: 'buildSourceNodeDescriptor', type: 'function', functionType: 'arrow', anonymous: true, purpose: 'iterating callback' },
  { id: 145, label: 'node', type: 'js entity', entityType: 'parameter', data: 'object' }, //doesNodeIdMatch(node)
  { id: 146, label: 'desc', type: 'js entity', entityType: 'parameter', data: 'object' }, //doesDescriptionNodeIdMatch(desc)
  { id: 147, label: 'edge', type: 'js entity', entityType: 'parameter', data: 'object' }, //doesEdgeSourceMatch(edge)
  { id: 148, label: 'edge', type: 'js entity', entityType: 'parameter', data: 'object' }, //doesEdgeTargetMatch(edge)
  { id: 149, label: 'edge', type: 'js entity', entityType: 'parameter', data: 'object' }, //buildTargetNodeDescriptor(edge)
  { id: 150, label: 'edge', type: 'js entity', entityType: 'parameter', data: 'object' }, //buildSourceNodeDescriptor(edge)
  { id: 158, label: 'additionalTypes', type: 'js entity', entityType: 'constant', data: 'array' },
]

const edges = [
  // graph-structure.js contains nodes, edges, descriptions and reverseDict
  { id: 8, source: 1, target: 2, relation: 'declares' },
  { id: 9, source: 1, target: 3, relation: 'declares' },
  { id: 10, source: 1, target: 4, relation: 'declares' },
  { id: 20, source: 1, target: 19, relation: 'declares' },
  // nodes contains node
  { id: 12, source: 2, target: 5, relation: 'contains' },
  // edges contains edge
  { id: 13, source: 3, target: 6, relation: 'contains' },
  // descriptions contains description
  { id: 14, source: 4, target: 7, relation: 'contains' },
  // project-graph contains index.html, graph-structure.js and script.js
  { id: 16, source: 15, target: 1, relation: 'contains' },
  { id: 19, source: 15, target: 17, relation: 'contains' },
  { id: 36, source: 15, target: 23, relation: 'contains' },
  // index.html loads graph-structure.js, script.js
  { id: 18, source: 17, target: 1, relation: 'loads' },
  { id: 37, source: 17, target: 23, relation: 'loads' },
  // script.js contains nodeList, nodeNameBold, nodeTypeBtn, nodeDescriptionParagraph, handleHashChange, presentNode, getNodeInfo, getConnectedNodesInfo, useNodeTemplate. Calls presentNode, assignes handleHashChange to onhashchange
  { id: 38, source: 23, target: 21, relation: 'declares' },
  { id: 39, source: 23, target: 22, relation: 'declares' },
  { id: 40, source: 23, target: 25, relation: 'declares' },
  { id: 41, source: 23, target: 26, relation: 'declares' },
  { id: 42, source: 23, target: 27, relation: 'declares' },
  { id: 43, source: 23, target: 29, relation: 'declares' },
  { id: 44, source: 23, target: 30, relation: 'declares' },
  { id: 45, source: 23, target: 31, relation: 'declares' },
  { id: 46, source: 23, target: 32, relation: 'declares' },
  { id: 48, source: 23, target: 34, relation: 'declares' },
  { id: 49, source: 23, target: 35, relation: 'declares' },
  { id: 76, source: 23, target: 29, relation: 'calls' },
  { id: 77, source: 29, target: 34, relation: 'takes' }, 
  // handleHashChange declares nodeId and runs presentNode, passing nodeId
  { id: 51, source: 27, target: 50, relation: 'declares' },
  { id: 47, source: 27, target: 29, relation: 'calls' },
  { id: 52, source: 29, target: 50, relation: 'takes' },
  { id: 119, source: 27, target: 34, relation: 'uses', conditional: true },
  // presentNode accepts nodeId, declares nodeDescriptor, nodeDescriptors, nodeItems, descriptor, li, span, a, button, runs getNodeInfo, getConnectedNodesInfo and useNodeTemplate, passing nodeId
  { id: 54, source: 53, target: 29, relation: 'parametrizes' },
  { id: 63, source: 29, target: 55, relation: 'declares' },
  { id: 64, source: 29, target: 56, relation: 'declares' },
  { id: 65, source: 29, target: 57, relation: 'declares' },
  { id: 66, source: 29, target: 58, relation: 'declares' },
  { id: 67, source: 29, target: 59, relation: 'declares' },
  { id: 68, source: 29, target: 60, relation: 'declares' },
  { id: 69, source: 29, target: 61, relation: 'declares' },
  { id: 70, source: 29, target: 62, relation: 'declares' },
  { id: 71, source: 29, target: 30, relation: 'calls' },
  { id: 72, source: 29, target: 31, relation: 'calls' },
  { id: 73, source: 29, target: 32, relation: 'calls' },
  { id: 74, source: 30, target: 53, relation: 'takes' },
  { id: 75, source: 31, target: 53, relation: 'takes' },
  { id: 120, source: 29, target: 21, relation: 'uses' },
  { id: 121, source: 29, target: 22, relation: 'uses' },
  { id: 122, source: 29, target: 25, relation: 'uses' },
  { id: 123, source: 29, target: 26, relation: 'uses' },
  // getNodeInfo accepts nodeId, declares node, description, returns nodeInfo, uses doesNodeIdMatch, doesDescriptionNodeIdMatch
  { id: 82, source: 79, target: 30, relation: 'parametrizes' },
  { id: 83, source: 30, target: 78, relation: 'declares' },
  { id: 84, source: 30, target: 80, relation: 'declares' },
  { id: 85, source: 30, target: 81, relation: 'returns' },
  { id: 86, source: 81, target: 55, relation: 'returned into' },
  { id: 127, source: 30, target: 110, relation: 'uses' },
  { id: 130, source: 110, target: 79, relation: 'uses' },
  { id: 151, source: 145, target: 110, relation: 'parametrizes' },
  { id: 128, source: 30, target: 111, relation: 'uses' },
  { id: 131, source: 111, target: 79, relation: 'uses' },
  { id: 152, source: 146, target: 111, relation: 'parametrizes' },
  { id: 157 , source: 81, target: 78, relation: 'uses' },
  { id: 129, source: 81, target: 80, relation: 'uses' },
  { id: 124, source: 30, target: 2, relation: 'uses' },
  { id: 125, source: 30, target: 4, relation: 'uses' },
  // getConnectedNodesInfo accepts nodeId, declares targetEdges, sourceEdges, targetNodes, sourceNodes, returns connectedNodesInfo, uses doesEdgeSourceMatch, doesEdgeTargetMatch, buildTargetNodeDescriptor, buildSourceNodeDescriptor
  { id: 93, source: 87, target: 31, relation: 'parametrizes' },
  { id: 94, source: 31, target: 88, relation: 'declares' },
  { id: 95, source: 31, target: 89, relation: 'declares' },
  { id: 96, source: 31, target: 90, relation: 'declares' },
  { id: 97, source: 31, target: 91, relation: 'declares' },
  { id: 98, source: 31, target: 92, relation: 'returns' },
  { id: 99, source: 92, target: 56, relation: 'returned into' },
  { id: 137, source: 92, target: 91, relation: 'uses' },
  { id: 138, source: 92, target: 90, relation: 'uses' },
  { id: 126, source: 31, target: 112, relation: 'uses' },
  { id: 132, source: 112, target: 87, relation: 'uses' },
  { id: 153, source: 147, target: 112, relation: 'parametrizes' },
  { id: 116, source: 31, target: 113, relation: 'uses' },
  { id: 133, source: 113, target: 87, relation: 'uses' },
  { id: 154, source: 148, target: 113, relation: 'parametrizes' },
  { id: 117, source: 31, target: 114, relation: 'uses' },
  { id: 134, source: 114, target: 30, relation: 'calls' },
  { id: 155, source: 149, target: 114, relation: 'parametrizes' },
  { id: 118, source: 31, target: 115, relation: 'uses' },
  { id: 135, source: 115, target: 30, relation: 'calls' },
  { id: 136, source: 115, target: 19, relation: 'uses' },
  { id: 156, source: 150, target: 115, relation: 'parametrizes' },
  { id: 139, source: 31, target: 3, relation: 'uses' },
  // useNodeTemplate declares li, span, a, button, returns templateElementsDict
  { id: 105, source: 32, target: 100, relation: 'declares' },
  { id: 106, source: 32, target: 101, relation: 'declares' },
  { id: 107, source: 32, target: 102, relation: 'declares' },
  { id: 108, source: 32, target: 103, relation: 'declares' },
  { id: 109, source: 32, target: 104, relation: 'returns' },
  { id: 140, source: 32, target: 24, relation: 'uses' },
  { id: 141, source: 104, target: 100, relation: 'uses' },
  { id: 142, source: 104, target: 101, relation: 'uses' },
  { id: 143, source: 104, target: 102, relation: 'uses' },
  { id: 144, source: 104, target: 103, relation: 'uses' },
]

const descriptions = [
  { nodeId: 1, text: 'This file contains the graph structure of the project.' },
  { nodeId: 2, text: 'The constant is the array that contains all the nodes of the graph.' },
  { nodeId: 3, text: 'The constant is the array that contains all the edges of the graph.' },
  { nodeId: 4, text: 'The constant is an array that contains all the descriptions of the graph.' },
  { nodeId: 5, text: 'Multiple node objects contain the node id, label, type and other data about each node.' },
  { nodeId: 6, text: 'Multiple edge objects contain the source node id, target node id, label and other data about each edge.' },
  { nodeId: 7, text: 'Multiple description objects contain the node id and text of each node or edge description.' },
  { nodeId: 15, text: 'The root directory of the project, it contains all the files of the project.' },
  { nodeId: 17, text: 'The default web page that gives a user access to the graph.' },
  { nodeId: 19, text: 'The constant is an object that contains the reverse of each possible edge relation.' },
  { nodeId: 21, text: 'The constant is a ul DOM element that contains the list of related nodes.' },
  { nodeId: 22, text: 'The constant is a b DOM element that contains the name of the current node.' },
  { nodeId: 23, text: 'The file is the script that gives the web page its functionality. It declares all sort of things. Assigns handleHashChange and calls presentNode as soon as page is loaded.' },
  { nodeId: 24, text: 'The constant is a template element that contains the template for a related node rendering.' },
  { nodeId: 25, text: 'The constant is a button DOM element shown in the heading, it shows the type of the current node.' },
  { nodeId: 26, text: 'The constant is a p DOM element that contains the description of the current node.' },
  { nodeId: 27, text: 'The function is an event handler that runs when the location hash changes, which normally occurs when user clicked on one of related nodes in the list.' },
  { nodeId: 29, text: 'The function that modifies the UI to present the current node and its relations. It gets li template clones, fills them and replaces with them previous content of nodeList.' },
  { nodeId: 30, text: 'The function aggregates the data of the current node from the graph arrays.' },
  { nodeId: 31, text: 'The function aggregates the data of all the nodes related to node found by the id parameter.' },
  { nodeId: 32, text: 'The function is a factory that creates a cloned list item from the template to show a related node with it.' },
  { nodeId: 33, text: 'The function is an event handler that runs when the location hash changes.' },
  { nodeId: 34, text: 'The constant is the id number of a node to present when the page loads. It is often defined by the hash at the end of the address.' },
  { nodeId: 35, text: 'The constant is the heading of the current node. It used to get it\'s children elements bold and button, it\'s next sibling paragraph' },
  { nodeId: 50, text: 'The constant is the id number of a node to present when location hash has been changed.' },
  { nodeId: 53, text: 'The parameter is the id number of a node to present when presentNode is called.' },
  { nodeId: 55, text: 'The constant is an object that contains the data of the current node.' },
  { nodeId: 56, text: 'The constant is an array that contains the data of all the nodes related to the current node.' },
  { nodeId: 57, text: 'The constant is an array that contains the li DOM elements of all the related nodes.' },
  { nodeId: 58, text: 'The constant is an object that contains the data of a related node.' },
  { nodeId: 59, text: 'The constant is a li DOM element that contains a related node information.' },
  { nodeId: 60, text: 'The constant is a span DOM element that contains the relation of a related node to the current node.' },
  { nodeId: 61, text: 'The constant is an anchor DOM element that contains the link to a related node.' },
  { nodeId: 62, text: 'The constant is a button DOM element that contains the type of a related node.' },
  { nodeId: 78, text: 'The constant is an object that contains the data of a found node.' },
  { nodeId: 79, text: 'The parameter is the id number of a node to get data of.' },
  { nodeId: 80, text: 'The constant is an object that contains the data of a found description.' },
  { nodeId: 81, text: 'The object is an improvised structure that contains all the data on a node in question.' },
  { nodeId: 87, text: 'The parameter is the id number of a node to get connected nodes data for.' },
  { nodeId: 88, text: 'The constant is an array that contains the data of all the edges that have the node in question as their source.' },
  { nodeId: 89, text: 'The constant is an array that contains the data of all the edges that have the node in question as their target.' },
  { nodeId: 90, text: 'The constant is an array that contains the data of all the nodes that have the node in question as their source.' },
  { nodeId: 91, text: 'The constant is an array that contains the data of all the nodes that have the node in question as their target.' },
  { nodeId: 92, text: 'The object is an improvised structure that contains all the data on the nodes related to the node in question.' },
  { nodeId: 100, text: 'The constant is a li DOM element that contains the clone of the node template content.' },
  { nodeId: 101, text: 'The constant is a span DOM element that contains the span from the cloned node template list item.' },
  { nodeId: 102, text: 'The constant is an anchor DOM element that contains the anchor from the cloned node template list item.' },
  { nodeId: 103, text: 'The constant is a button DOM element that contains the button from the cloned node template list item.' },
  { nodeId: 104, text: 'The object is an improvised structure that contains all the DOM elements from the cloned node template list item. It\'s temporary as it is used only to return the elements and then it is destructured.' },
  { nodeId: 110, text: 'The function is an iterating callback predicate that is passed to nodes.find() where it checks if the id of some node matches the id in question.' },
  { nodeId: 111, text: 'The function is an iterating callback predicate that is passed to descriptions.find() where it checks if the nodeId in some description matches the id in question.' },
  { nodeId: 112, text: 'The function is an iterating callback predicate that is passed to edges.filter() where it selects edges with the same source as the nodeId in question.' },
  { nodeId: 113, text: 'The function is an iterating callback predicate that is passed to edges.filter() where it selects edges with the same target as the nodeId in question.' },
  { nodeId: 114, text: 'The function is an iterating callback mapper that is passed to targetEdges.map() where it builds the descriptor of a related node. It takes each node and gets info for it by passing edge.target into the corresponding function.' },
  { nodeId: 115, text: 'The function is an iterating callback mapper that is passed to sourceEdges.map() where it builds the descriptor of a reverse-related node. It takes each node and gets info for it by passing edge.source into the corresponding function.' },
  { nodeId: 145, text: 'The parameter is a node object to check if it\'s id matches the id in question. It takes each node in the array one by one.' },
  { nodeId: 146, text: 'The parameter is a description object to check if it\'s nodeId matches the id in question. It takes each description in the array one by one.' },
  { nodeId: 147, text: 'The parameter is an edge object to check if it\'s source matches the id in question. It takes each edge in the array one by one.' },
  { nodeId: 148, text: 'The parameter is an edge object to check if it\'s target matches the id in question. It takes each edge in the array one by one.' },
  { nodeId: 149, text: 'The parameter is an edge object to build the descriptor of a node related by it\'s target. It takes each edge in the array one by one.' },
  { nodeId: 150, text: 'The parameter is an edge object to build the descriptor of a node related by it\'s source. It takes each edge in the array one by one.' },
]

const reverseDict = {
  'contains': 'contained by',
  'loads': 'loaded by',
  'declares': 'declared inside',
  'calls': 'called from',
  'takes': 'passed into',
  'parametrizes': 'parameterized by',
  'assigns': 'assigned by',
  'assigned to': 'handled by',
  'returns': 'returned by',
  'returned into': 'assigned with',
  'uses': 'used in',
}

const subTypes = ['format', 'entityType', 'functionType', 'data', 'purpose', 'multiple', 'conditional', 'anonymous']
